openapi: 3.0.2
info:
  version: 1.0.0
  title: BlackLotus
  description: "POR PONER"
servers:
  - url: 'http://127.0.0.1:8000/'
paths:
  /issues/:
    get:
      tags:
      - Issues
      summary: Finds all the issues
      operationId: getIssues
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
    post:
      tags:
      - Issues
      summary: Bulk issues
      operationId: BulkIssue
      parameters:
      - name: subjects
        in: query
        description: Add an issue per line or separated by spaces. Each name is a new issue.
        required: true
        schema:
          type: array
          items:
            type: string
        style: spaceDelimited
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                  errorExample:
                    $ref: '#/components/examples/code200BulkIssue'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error403'
  /issue/{id}/:
    get:
      tags:
      - Issues
      summary: Finds an issue with its id, if it's id
      operationId: getIssueById
      parameters:
      - name: id
        in: path
        description: Optional id of the issue
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/examples/error400'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error403'
    put:
      tags:
        - Issues
      summary: Assign an user to the issue
      parameters:
      - name: id
        in: path
        description: Id of the issue
        required: true
        schema:
          type: integer
      - name: asignTo
        in: query
        description: Name of the user to asign
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'User assigned'
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/code200putProfile'
  /activity/:
    get:
      tags:
      - Activities
      summary: List all the activities of an issue
      operationId: getActivitiesOfIssue
      parameters:
      - name: id
        in: query
        description: Id of the issue
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error403'
  /profile/{username}/:
    get:
      tags:
      - Profiles
      summary: Get the profile of a user
      operationId: getProfileOfUser
      parameters:
      - name: username
        in : path
        description: Username of the profile
        required: true
        schema:
          type: string

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404noProfile'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
            description: 'Error: Forbidden'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error403'
    put:
      tags:
        - Profiles
      summary: Edit a profile by the username
      parameters:
      - name: username
        in : path
        description: Username of the profile
        required: true
        schema:
          type: string
      - name: bio
        in : query
        description: New biography of the profile
        required: false
        schema:
          type: string
      - name: image
        in : query
        description: New url of the profile image
        required: false
        schema:
          type: string
      - name: email
        in : query
        description: New email of the profile
        required: false
        schema:
          type: string
      - name: first_name
        in : query
        description: New name of the profile
        required: false
        schema:
          type: string
      responses:
        200:
          description: 'Profile updated'
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/code200putProfile'

components:
  securitySchemes:
    ApiKeyAuth:
        type: apiKey
        in: header
        name: Authorization
  schemas:
    User:
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 2
        username:
            type: string
            minLength: 4
            example: 'TestSubject'

    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        bio:
          type: string
          example: 'Hello World'
        image:
          type: string
          example: '/Images/drilo.jpg'


    Activity:
      type: object
      properties:
        creationdate:
          type: string
          format: date-time
        field:
          type: string
          minLength: 4
          example: 'status'
        change:
          type: string
          minLength: 4
          example: 'In progress'
        old:
          type: string
          minLength: 4
          example: 'New'
        user:
          $ref: '#/components/schemas/User'

        issueChanged:
          $ref: '#/components/schemas/Issue'

        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'http://127.0.0.1:8000/api/Activity/?Activity=1'


    Issue:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        subject:
          type: string
          minLength: 4
          example: 'TestSubject'
        description:
          type: string
          minLength: 4
          maxLength: 100
          example: 'My content'
        creator:
          type: string
          minLength: 4
          maxLength: 100
          example: 'LluisPetardo'
        creationdate:
          type: string
          format: date-time
        modifieddate:
          type: string
          format: date-time
        deadlinedate:
          type: string
          format: date-time
        deadlinemotive:
          type: string
          minLength: 4
          maxLength: 100
          example: 'PQ_LluisPetardo'
        blocked:
          type: boolean
        blockmotiv*e:
          type: string
          minLength: 4
          maxLength: 100
          example: 'PQ_LluisPetardo'
        deadline:
          type: boolean
        status:
          type: integer
          format: int64
          example: 2
        type:
          type: integer
          format: int64
          example: 2
        severity:
          type: integer
          format: int64
          example: 2
        priority:
          type: integer
          format: int64
          example: 2
        watchers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        asignedTo:
          type: array
          items:
            $ref: '#/components/schemas/User'
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'http://127.0.0.1:8000/api/Issue/?Issue=1'

    ErrorResult:
      type: object
      properties:
        message:
          type: string
          example: 'Content is too long (maximum is 280 characters)'
      required:
        - message

  examples:
    code200putProfile:
      value:
        message: "Profile update complete"
    code200BulkIssue:
      value:
        message: "Bulk inserted"
    error400:
      value:
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        message: "You provided no token"
    error403:
      value:
        message: "You provided an invalid token"
    error404noProfile:
      value:
        message: "There is no profile with this username"
    error404noIssue:
      value:
        message: "Issue not found"

security:
  - ApiKeyAuth: []